#!/usr/bin/env python3
import logging
import time
from socket import AF_INET, SOL_SOCKET, SO_REUSEADDR, SOCK_DGRAM, socket

from gi.repository import Notify, GdkPixbuf

import click


class Message():
    def __init__(self, message, from_addr):
        self.message = message.decode('utf-8')
        self.received = time.time()
        self.from_ip = from_addr[0]
        self.from_port = from_addr[1]
        self.msgtype = None
        self.get_msg_type()

    def __repr__(self):
        return "{} {:>16} | {}".format(
            self.received, self.from_ip, self.message)

    def get_msg_type(self):
        if self.message.startswith('['):
            try:
                close_index = self.message.index(']', 1)
            except ValueError:
                self.msgtype = None
                return

            sub_msg = self.message[1:close_index]
            self.msgtype = sub_msg
            self.message = self.message[close_index + 1:]
        else:
            self.msgtype = None


def show_message(message):
    Notify.Notification.new(message.from_ip, message.message).show()


def alert_message(message, msglog=None):
    msg = "\033[31;1m !! ALERT !!  " + message.message + "\033[0m"
    logging.info(msg)
    if msglog is not None:
        msglog.write(msg)
        msglog.flush()
    icon = GdkPixbuf.Pixbuf.new_from_file("icons/alert.png")
    notification = Notify.Notification.new(message.from_ip, message.message)
    notification.set_icon_from_pixbuf(icon)
    notification.set_image_from_pixbuf(icon)
    notification.set_urgency(2)
    notification.show()


def setup_logging(logfile=None, level=logging.INFO):
    logging.basicConfig(filename=logfile, level=level)


MSG_TYPE_HANDLERS = {
    "alert": alert_message,
}

DEFAULT_BIND_ADDR = "0.0.0.0"
DEFAULT_BIND_PORT = 55555


@click.command()
@click.option("--bindaddr", "-b", "address", type=str,
              default=DEFAULT_BIND_ADDR,
              help=("IPv4 Address to listen on. Default: {}".format(
                    DEFAULT_BIND_ADDR)))
@click.option("--port", "-p", "port", type=int,
              default=DEFAULT_BIND_PORT,
              help=("UDP port number to listen on. Default: {}".format(
                    DEFAULT_BIND_PORT)))
@click.option("--logfile", "-L", "logfile", type=str, default=None,
              help=("Name of file to write log messages generated by "
                    "msgd itself. Received messages will not be written to "
                    "this file."))
@click.option("--msglog", "-l", "msglog", type=click.File(mode="w+"),
              default=None,
              help=("File to save received messages to. Not used by default."
                    " Default is to log messages to standard output."))
@click.option("--no-types", "-T", "notypes", is_flag=True,
              default=False,
              help=("Do not handle message types at all. Default: False"))
def main(address, port, msglog, logfile, notypes):
    """
    Message Daemon
    ---
    A simple program to receive textual messages via UDP and use the desktop
    environment's notification system to display the message.

    Allows optional logging of messages to a file.

    Also allows the idea of "message types". For example, a message of type,
    'alert' could take additional measures to notify somebody. A message
    type of 'status' could be used for telemetry recording purposes.

    The message's subtype, if present, is pre-pended to the message. For
    example, for an 'alert' subtype, the following text should be pre-pended
    to the supplied message:

            [alert]message text here

    If the text within the brackets matches a registered handler function,
    then that function will be executed.
    """
    setup_logging(logfile=logfile, level=logging.INFO)

    bind_address = (address, port)
    Notify.init("Message-D")
    server_sock = socket(AF_INET, SOCK_DGRAM)
    server_sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
    server_sock.bind(bind_address)

    if msglog:
        logging.info("Logging messages to: {}".format(msglog.name))

    while True:
        data, address = server_sock.recvfrom(4096)
        msg = Message(data, address)

        logging.info("Received {} bytes from {}:{}{}".format(
            len(data), address[0], address[1],
            " " + msg.msgtype + " message type" if msg.msgtype else ""))
        if msglog:
            if notypes is False and msg.msgtype in MSG_TYPE_HANDLERS:
                MSG_TYPE_HANDLERS[msg.msgtype](msg, msglog=msglog)
            else:
                msglog.write(msg.message)
            msglog.flush()
        else:
            if notypes is False and msg.msgtype in MSG_TYPE_HANDLERS:
                MSG_TYPE_HANDLERS[msg.msgtype](msg)
            else:
                show_message(msg)


if __name__ == '__main__':
    main()
