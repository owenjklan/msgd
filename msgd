#!/usr/bin/env python3
import os
import sys
import logging
import time
import importlib
from socket import (
    AF_INET, SOL_SOCKET, SO_REUSEADDR, SOCK_DGRAM,
    gethostbyaddr, herror, socket, )

import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify, GdkPixbuf

import click


class Message():
    def __init__(self, message, from_addr):
        self.message = message.decode('utf-8')
        self.received = time.time()
        self.from_ip = from_addr[0]
        self.from_port = from_addr[1]
        self.msgtype = None
        self.get_msg_type()

    def __repr__(self):
        return "{} {:>16} | {}".format(
            self.received, self.from_ip, self.message)

    def get_msg_type(self):
        if self.message.startswith('['):
            try:
                close_index = self.message.index(']', 1)
            except ValueError:
                self.msgtype = None
                return

            sub_msg = self.message[1:close_index]
            self.msgtype = sub_msg
            self.message = self.message[close_index + 1:]
        else:
            self.msgtype = None


def show_message(message, hostname=None):
    Notify.Notification.new(message.from_ip if hostname is None else hostname,
        message.message).show()


def setup_logging(logfile=None, level=logging.INFO):
    logging.basicConfig(filename=logfile, level=level)


def import_handlers(handler_dir):
    sys.path.append(handler_dir)

    handler_files = [f for f in os.listdir(handler_dir) if f.endswith('.py')]
    for handler_file in handler_files:
        handler_type = handler_file.split('.py')[0]
        logging.info("Importing '{}'...".format(handler_type))
        handler_module = importlib.import_module(handler_file.split('.py')[0])
        MSG_TYPE_HANDLERS[handler_type] = handler_module.handle_message

        if hasattr(handler_module, 'motd'):
            motd_text = handler_module.motd()
            print("\033[1;34m{} MOTD:\033[0m {}".format(
                handler_type, motd_text))
        logging.debug("Imported handler for '{}' from '{}'".format(
            handler_type, os.path.join(handler_dir, handler_file)))


MSG_TYPE_HANDLERS = {}

DEFAULT_BIND_ADDR = "0.0.0.0"
DEFAULT_BIND_PORT = 55555


@click.command()
@click.option("--bindaddr", "-b", "address", type=str,
              default=DEFAULT_BIND_ADDR,
              help=("IPv4 Address to listen on. Default: {}".format(
                    DEFAULT_BIND_ADDR)))
@click.option("--port", "-p", "port", type=int,
              default=DEFAULT_BIND_PORT,
              help=("UDP port number to listen on. Default: {}".format(
                    DEFAULT_BIND_PORT)))
@click.option("--debug", "-D", "debug",
              is_flag=True, default=False,
              help=("Display debug-level log messages. Default: False"))
@click.option("--logfile", "-L", "logfile", type=str, default=None,
              help=("Name of file to write log messages generated by "
                    "msgd itself. Received messages will not be written to "
                    "this file."))
@click.option("--msglog", "-l", "msglog", type=click.File(mode="a+"),
              default=None,
              help=("File to save received messages to. Not used by default."
                    " Default is to log messages to standard output. "
                    "Messages are appended to an already-existing message "
                    "log file."))
@click.option("--no-dns", "-n", "nodns",
              is_flag=True, default=False,
              help=("Disable reverse-DNS lookups for IP addresses of "
                    "senders. Default: False"))
@click.option("--no-types", "-T", "notypes",
              is_flag=True, default=False,
              help=("Do not handle message types at all. Default: False"))
@click.option("--always-notify", "-a", "always_notify",
              is_flag=True, default=False,
              help=("If not specified, when using the --msglog option, "
                    "received messages will be written to the log but "
                    "not displayed on the Desktop. This setting means "
                    "that the messages will be displayed as Desktop "
                    "notifications, regardless of other settings"))
def main(address, port, msglog, logfile, notypes, always_notify, debug, nodns):
    """
    Message Daemon
    ---
    A simple program to receive textual messages via UDP and use the desktop
    environment's notification system to display the message.

    Allows optional logging of messages to a file.

    Also allows the idea of "message types". For example, a message of type,
    'alert' could take additional measures to notify somebody. A message
    type of 'status' could be used for telemetry recording purposes.

    The message's subtype, if present, is pre-pended to the message. For
    example, for an 'alert' subtype, the following text should be pre-pended
    to the supplied message:

            [alert]message text here

    If the text within the brackets matches a registered handler function,
    then that function will be executed.
    """
    if debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    setup_logging(logfile=logfile, level=log_level)
    import_handlers("/usr/share/msgd/handlers")

    bind_address = (address, port)
    Notify.init("Message-D")
    server_sock = socket(AF_INET, SOCK_DGRAM)
    server_sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
    server_sock.bind(bind_address)

    if msglog:
        logging.info("Logging messages to: {}".format(msglog.name))

    while True:
        data, address = server_sock.recvfrom(4096)
        msg = Message(data, address)

        logging.info("Received {} bytes from {}:{}{}".format(
            len(data), address[0], address[1],
            " " + msg.msgtype + " message type" if msg.msgtype else ""))

        hostname = None
        # Attempt Reverse DNS lookup.
        if nodns is False:
            try:
                hostname = gethostbyaddr(msg.from_ip)[0]
            except herror:  # Unknown host
                hostname = None

        if msglog:
            if notypes is False and msg.msgtype in MSG_TYPE_HANDLERS:
                MSG_TYPE_HANDLERS[msg.msgtype](msg, msglog=msglog)
            else:
                msglog.write(msg.message)
            msglog.flush()
            if always_notify:
                show_message(msg, hostname=hostname)
        else:
            if notypes is False and msg.msgtype in MSG_TYPE_HANDLERS:
                MSG_TYPE_HANDLERS[msg.msgtype](
                    msg, msglog=msglog, hostname=hostname)
            show_message(msg, hostname=hostname)


if __name__ == '__main__':
    main()
